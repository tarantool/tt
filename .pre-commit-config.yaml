default_install_hook_types:
  - pre-commit
  - commit-msg

repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
        stages: [pre-commit, manual]
        # Ignore some Yaml's with following pattern in `testdata` subdirectories.
        exclude: testdata/.*?(?:invalid|bad|broken|wrong)[^/]*\.ya?ml$
      - id: check-merge-conflict
        stages: [pre-commit, manual]
      - id: no-commit-to-branch
        stages: [pre-commit]
        args: [--branch, master, --pattern, release/.*]
      - id: file-contents-sorter
        name: "Sort cspell dictionary"
        stages: [pre-commit, manual]
        files: ".cspell_project-words.txt"
        args: [--ignore-case, --unique]

  - repo: https://github.com/streetsidesoftware/cspell-cli
    rev: v9.1.0
    hooks:
      - id: cspell
        name: "Spell checking commit message"
        stages: [commit-msg]
        args: [--config=.cspell.yaml, --show-context, --show-suggestions]
        additional_dependencies:
          - "@cspell/dict-markdown"
          - "@cspell/dict-ru_ru"
          - "@cspell/dict-golang"
          - "@cspell/dict-python"
          - "@cspell/dict-lua"
          - "@cspell/dict-cpp"
          - "@cspell/dict-software-terms"

      - id: cspell
        name: "Spell checking source files"
        stages: [pre-commit, manual]
        args: [--config=.cspell.yaml, --show-context, --show-suggestions]
        types_or: [go, python, markdown]
        exclude: |
          (?x)^(
                .*\.pb.go|
                .*/third_party/.*
          )$
        additional_dependencies:
          - "@cspell/dict-markdown"
          - "@cspell/dict-ru_ru"
          - "@cspell/dict-golang"
          - "@cspell/dict-python"
          - "@cspell/dict-lua"
          - "@cspell/dict-cpp"
          - "@cspell/dict-software-terms"

  - repo: local
    hooks:
      - id: go-format
        language: golang
        types: [go]
        name: "Go: formatting sources"
        stages: [pre-commit, manual]
        exclude: \.pb\.go$
        entry: bash -c "GOFUMPT_SPLIT_LONG_LINES=on gofumpt $@"
        args: [-e, -w, -extra]
        additional_dependencies:
          - mvdan.cc/gofumpt@v0.8.0

  - repo: https://github.com/segmentio/golines
    rev: fc305205784a70b4cfc17397654f4c94e3153ce4
    hooks:
      - id: golines
        name: "Go: shorten long lines"
        stages: [pre-commit, manual]
        exclude: \.pb\.go$
        args: [--max-len=100, --tab-len=4, --no-reformat-tags]

  - repo: https://github.com/golangci/golangci-lint
    rev: v2.2.2
    hooks:
      - id: golangci-lint
        name: "Go: verify sources"
        description: |
          Checking only `staged` changes, added to be committed.
          Issue `golangci-lint` command does not have an option to accept specified list of files.
        pass_filenames: false
        stages: [pre-commit]
        args: [--fast-only, --config=golint-precommit.yml]

      - id: golangci-lint-full
        name: "Go: verify all sources (CI)"
        description: Checking all Go sources.
        always_run: true
        stages: [manual]
        args: [--config=golint-precommit-ci.yml, --allow-parallel-runners]

  - repo: local
    hooks:
      - id: golangci-lint-diff
        language: golang
        types: [go]
        name: "Go: verify sources diff (CI)"
        description: Checking only fresh changes, added to the PR.
        stages: [manual]
        always_run: true
        entry: >-
          bash -c "golangci-lint run --new-from-rev=${BASE_BRANCH:-master}
          --config=golint-precommit.yml --allow-parallel-runners"
        additional_dependencies:
          - github.com/golangci/golangci-lint/v2/cmd/golangci-lint@v2.1.6

  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.12.2
    hooks:
      - id: ruff-format
        name: "Py: Run the formatter"
        stages: [pre-commit, manual]
        files: test/.*\.py$

      - id: ruff-check
        name: "Py: Run the linter"
        args: [--fix]
        stages: [pre-commit, manual]
        files: test/.*\.py$

  - repo: https://github.com/DavidAnson/markdownlint-cli2
    rev: v0.18.1
    hooks:
      - id: markdownlint-cli2
        name: "MD: check markdown files"
        stages: [pre-commit, manual]
        args: [--fix]

  - repo: https://github.com/jorisroovers/gitlint
    rev: v0.19.1
    hooks:
      - id: gitlint
        name: "Verify commit message format"
        stages: [commit-msg]
        args: [--staged, --config, .gitlint-precommit.ini, --msg-filename]
