// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: aeon_ddl.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DDLService_CreateSpace_FullMethodName = "/aeon.DDLService/CreateSpace"
	DDLService_DropSpace_FullMethodName   = "/aeon.DDLService/DropSpace"
)

// DDLServiceClient is the client API for DDLService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DDL API to Aeon - a distributed database based on Tarantool.
type DDLServiceClient interface {
	// Creates a space with the given definition.
	CreateSpace(ctx context.Context, in *CreateSpaceRequest, opts ...grpc.CallOption) (*CreateSpaceResponse, error)
	// Drops a space by name.
	DropSpace(ctx context.Context, in *DropSpaceRequest, opts ...grpc.CallOption) (*DropSpaceResponse, error)
}

type dDLServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDDLServiceClient(cc grpc.ClientConnInterface) DDLServiceClient {
	return &dDLServiceClient{cc}
}

func (c *dDLServiceClient) CreateSpace(ctx context.Context, in *CreateSpaceRequest, opts ...grpc.CallOption) (*CreateSpaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSpaceResponse)
	err := c.cc.Invoke(ctx, DDLService_CreateSpace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDLServiceClient) DropSpace(ctx context.Context, in *DropSpaceRequest, opts ...grpc.CallOption) (*DropSpaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DropSpaceResponse)
	err := c.cc.Invoke(ctx, DDLService_DropSpace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DDLServiceServer is the server API for DDLService service.
// All implementations must embed UnimplementedDDLServiceServer
// for forward compatibility.
//
// DDL API to Aeon - a distributed database based on Tarantool.
type DDLServiceServer interface {
	// Creates a space with the given definition.
	CreateSpace(context.Context, *CreateSpaceRequest) (*CreateSpaceResponse, error)
	// Drops a space by name.
	DropSpace(context.Context, *DropSpaceRequest) (*DropSpaceResponse, error)
	mustEmbedUnimplementedDDLServiceServer()
}

// UnimplementedDDLServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDDLServiceServer struct{}

func (UnimplementedDDLServiceServer) CreateSpace(context.Context, *CreateSpaceRequest) (*CreateSpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpace not implemented")
}
func (UnimplementedDDLServiceServer) DropSpace(context.Context, *DropSpaceRequest) (*DropSpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropSpace not implemented")
}
func (UnimplementedDDLServiceServer) mustEmbedUnimplementedDDLServiceServer() {}
func (UnimplementedDDLServiceServer) testEmbeddedByValue()                    {}

// UnsafeDDLServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DDLServiceServer will
// result in compilation errors.
type UnsafeDDLServiceServer interface {
	mustEmbedUnimplementedDDLServiceServer()
}

func RegisterDDLServiceServer(s grpc.ServiceRegistrar, srv DDLServiceServer) {
	// If the following call pancis, it indicates UnimplementedDDLServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DDLService_ServiceDesc, srv)
}

func _DDLService_CreateSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDLServiceServer).CreateSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DDLService_CreateSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDLServiceServer).CreateSpace(ctx, req.(*CreateSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDLService_DropSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDLServiceServer).DropSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DDLService_DropSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDLServiceServer).DropSpace(ctx, req.(*DropSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DDLService_ServiceDesc is the grpc.ServiceDesc for DDLService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DDLService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aeon.DDLService",
	HandlerType: (*DDLServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSpace",
			Handler:    _DDLService_CreateSpace_Handler,
		},
		{
			MethodName: "DropSpace",
			Handler:    _DDLService_DropSpace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aeon_ddl.proto",
}
