// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: aeon_sql.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SQLService_SQL_FullMethodName       = "/aeon.SQLService/SQL"
	SQLService_SQLStream_FullMethodName = "/aeon.SQLService/SQLStream"
	SQLService_SQLCheck_FullMethodName  = "/aeon.SQLService/SQLCheck"
)

// SQLServiceClient is the client API for SQLService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SQL API to Aeon - a distributed database based on Tarantool.
type SQLServiceClient interface {
	// Execute a SQL query.
	SQL(ctx context.Context, in *SQLRequest, opts ...grpc.CallOption) (*SQLResponse, error)
	// Execute a SQL query and return the result using a stream.
	SQLStream(ctx context.Context, in *SQLRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SQLResponse], error)
	// Check if an SQL is valid
	// We provide the method for database CLI.
	SQLCheck(ctx context.Context, in *SQLRequest, opts ...grpc.CallOption) (*SQLCheckResponse, error)
}

type sQLServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSQLServiceClient(cc grpc.ClientConnInterface) SQLServiceClient {
	return &sQLServiceClient{cc}
}

func (c *sQLServiceClient) SQL(ctx context.Context, in *SQLRequest, opts ...grpc.CallOption) (*SQLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SQLResponse)
	err := c.cc.Invoke(ctx, SQLService_SQL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLServiceClient) SQLStream(ctx context.Context, in *SQLRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SQLResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SQLService_ServiceDesc.Streams[0], SQLService_SQLStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SQLRequest, SQLResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SQLService_SQLStreamClient = grpc.ServerStreamingClient[SQLResponse]

func (c *sQLServiceClient) SQLCheck(ctx context.Context, in *SQLRequest, opts ...grpc.CallOption) (*SQLCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SQLCheckResponse)
	err := c.cc.Invoke(ctx, SQLService_SQLCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SQLServiceServer is the server API for SQLService service.
// All implementations must embed UnimplementedSQLServiceServer
// for forward compatibility.
//
// SQL API to Aeon - a distributed database based on Tarantool.
type SQLServiceServer interface {
	// Execute a SQL query.
	SQL(context.Context, *SQLRequest) (*SQLResponse, error)
	// Execute a SQL query and return the result using a stream.
	SQLStream(*SQLRequest, grpc.ServerStreamingServer[SQLResponse]) error
	// Check if an SQL is valid
	// We provide the method for database CLI.
	SQLCheck(context.Context, *SQLRequest) (*SQLCheckResponse, error)
	mustEmbedUnimplementedSQLServiceServer()
}

// UnimplementedSQLServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSQLServiceServer struct{}

func (UnimplementedSQLServiceServer) SQL(context.Context, *SQLRequest) (*SQLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SQL not implemented")
}
func (UnimplementedSQLServiceServer) SQLStream(*SQLRequest, grpc.ServerStreamingServer[SQLResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SQLStream not implemented")
}
func (UnimplementedSQLServiceServer) SQLCheck(context.Context, *SQLRequest) (*SQLCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SQLCheck not implemented")
}
func (UnimplementedSQLServiceServer) mustEmbedUnimplementedSQLServiceServer() {}
func (UnimplementedSQLServiceServer) testEmbeddedByValue()                    {}

// UnsafeSQLServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SQLServiceServer will
// result in compilation errors.
type UnsafeSQLServiceServer interface {
	mustEmbedUnimplementedSQLServiceServer()
}

func RegisterSQLServiceServer(s grpc.ServiceRegistrar, srv SQLServiceServer) {
	// If the following call pancis, it indicates UnimplementedSQLServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SQLService_ServiceDesc, srv)
}

func _SQLService_SQL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SQLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLServiceServer).SQL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SQLService_SQL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLServiceServer).SQL(ctx, req.(*SQLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLService_SQLStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SQLRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SQLServiceServer).SQLStream(m, &grpc.GenericServerStream[SQLRequest, SQLResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SQLService_SQLStreamServer = grpc.ServerStreamingServer[SQLResponse]

func _SQLService_SQLCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SQLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLServiceServer).SQLCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SQLService_SQLCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLServiceServer).SQLCheck(ctx, req.(*SQLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SQLService_ServiceDesc is the grpc.ServiceDesc for SQLService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SQLService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aeon.SQLService",
	HandlerType: (*SQLServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SQL",
			Handler:    _SQLService_SQL_Handler,
		},
		{
			MethodName: "SQLCheck",
			Handler:    _SQLService_SQLCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SQLStream",
			Handler:       _SQLService_SQLStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "aeon_sql.proto",
}
