// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        v5.28.3
// source: aeon_value.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Special value denoting null.
type NullValue int32

const (
	NullValue_NULL_VALUE NullValue = 0
)

// Enum value maps for NullValue.
var (
	NullValue_name = map[int32]string{
		0: "NULL_VALUE",
	}
	NullValue_value = map[string]int32{
		"NULL_VALUE": 0,
	}
)

func (x NullValue) Enum() *NullValue {
	p := new(NullValue)
	*p = x
	return p
}

func (x NullValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NullValue) Descriptor() protoreflect.EnumDescriptor {
	return file_aeon_value_proto_enumTypes[0].Descriptor()
}

func (NullValue) Type() protoreflect.EnumType {
	return &file_aeon_value_proto_enumTypes[0]
}

func (x NullValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NullValue.Descriptor instead.
func (NullValue) EnumDescriptor() ([]byte, []int) {
	return file_aeon_value_proto_rawDescGZIP(), []int{0}
}

type IntervalValue_IntervalAdjust int32

const (
	IntervalValue_INTERVAL_ADJUST_NONE   IntervalValue_IntervalAdjust = 0
	IntervalValue_INTERVAL_ADJUST_EXCESS IntervalValue_IntervalAdjust = 1
	IntervalValue_INTERVAL_ADJUST_LAST   IntervalValue_IntervalAdjust = 2
)

// Enum value maps for IntervalValue_IntervalAdjust.
var (
	IntervalValue_IntervalAdjust_name = map[int32]string{
		0: "INTERVAL_ADJUST_NONE",
		1: "INTERVAL_ADJUST_EXCESS",
		2: "INTERVAL_ADJUST_LAST",
	}
	IntervalValue_IntervalAdjust_value = map[string]int32{
		"INTERVAL_ADJUST_NONE":   0,
		"INTERVAL_ADJUST_EXCESS": 1,
		"INTERVAL_ADJUST_LAST":   2,
	}
)

func (x IntervalValue_IntervalAdjust) Enum() *IntervalValue_IntervalAdjust {
	p := new(IntervalValue_IntervalAdjust)
	*p = x
	return p
}

func (x IntervalValue_IntervalAdjust) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IntervalValue_IntervalAdjust) Descriptor() protoreflect.EnumDescriptor {
	return file_aeon_value_proto_enumTypes[1].Descriptor()
}

func (IntervalValue_IntervalAdjust) Type() protoreflect.EnumType {
	return &file_aeon_value_proto_enumTypes[1]
}

func (x IntervalValue_IntervalAdjust) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IntervalValue_IntervalAdjust.Descriptor instead.
func (IntervalValue_IntervalAdjust) EnumDescriptor() ([]byte, []int) {
	return file_aeon_value_proto_rawDescGZIP(), []int{3, 0}
}

// Array of arbitrary-typed values.
type ArrayValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Fields        []*Value               `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArrayValue) Reset() {
	*x = ArrayValue{}
	mi := &file_aeon_value_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArrayValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArrayValue) ProtoMessage() {}

func (x *ArrayValue) ProtoReflect() protoreflect.Message {
	mi := &file_aeon_value_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArrayValue.ProtoReflect.Descriptor instead.
func (*ArrayValue) Descriptor() ([]byte, []int) {
	return file_aeon_value_proto_rawDescGZIP(), []int{0}
}

func (x *ArrayValue) GetFields() []*Value {
	if x != nil {
		return x.Fields
	}
	return nil
}

// Map with string keys and arbitrary-typed values..
type MapValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Fields        map[string]*Value      `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MapValue) Reset() {
	*x = MapValue{}
	mi := &file_aeon_value_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MapValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapValue) ProtoMessage() {}

func (x *MapValue) ProtoReflect() protoreflect.Message {
	mi := &file_aeon_value_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapValue.ProtoReflect.Descriptor instead.
func (*MapValue) Descriptor() ([]byte, []int) {
	return file_aeon_value_proto_rawDescGZIP(), []int{1}
}

func (x *MapValue) GetFields() map[string]*Value {
	if x != nil {
		return x.Fields
	}
	return nil
}

// Date time value.
type DateTimeValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seconds       int64                  `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	Nsec          int64                  `protobuf:"varint,2,opt,name=nsec,proto3" json:"nsec,omitempty"`
	Location      string                 `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DateTimeValue) Reset() {
	*x = DateTimeValue{}
	mi := &file_aeon_value_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DateTimeValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateTimeValue) ProtoMessage() {}

func (x *DateTimeValue) ProtoReflect() protoreflect.Message {
	mi := &file_aeon_value_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateTimeValue.ProtoReflect.Descriptor instead.
func (*DateTimeValue) Descriptor() ([]byte, []int) {
	return file_aeon_value_proto_rawDescGZIP(), []int{2}
}

func (x *DateTimeValue) GetSeconds() int64 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *DateTimeValue) GetNsec() int64 {
	if x != nil {
		return x.Nsec
	}
	return 0
}

func (x *DateTimeValue) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

// Date time interval value.
type IntervalValue struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Year          int64                        `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`
	Month         int64                        `protobuf:"varint,2,opt,name=month,proto3" json:"month,omitempty"`
	Week          int64                        `protobuf:"varint,3,opt,name=week,proto3" json:"week,omitempty"`
	Day           int64                        `protobuf:"varint,4,opt,name=day,proto3" json:"day,omitempty"`
	Hour          int64                        `protobuf:"varint,5,opt,name=hour,proto3" json:"hour,omitempty"`
	Min           int64                        `protobuf:"varint,6,opt,name=min,proto3" json:"min,omitempty"`
	Sec           int64                        `protobuf:"varint,7,opt,name=sec,proto3" json:"sec,omitempty"`
	Nsec          int64                        `protobuf:"varint,8,opt,name=nsec,proto3" json:"nsec,omitempty"`
	Adjust        IntervalValue_IntervalAdjust `protobuf:"varint,9,opt,name=adjust,proto3,enum=aeon.IntervalValue_IntervalAdjust" json:"adjust,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IntervalValue) Reset() {
	*x = IntervalValue{}
	mi := &file_aeon_value_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IntervalValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntervalValue) ProtoMessage() {}

func (x *IntervalValue) ProtoReflect() protoreflect.Message {
	mi := &file_aeon_value_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntervalValue.ProtoReflect.Descriptor instead.
func (*IntervalValue) Descriptor() ([]byte, []int) {
	return file_aeon_value_proto_rawDescGZIP(), []int{3}
}

func (x *IntervalValue) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *IntervalValue) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *IntervalValue) GetWeek() int64 {
	if x != nil {
		return x.Week
	}
	return 0
}

func (x *IntervalValue) GetDay() int64 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *IntervalValue) GetHour() int64 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *IntervalValue) GetMin() int64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *IntervalValue) GetSec() int64 {
	if x != nil {
		return x.Sec
	}
	return 0
}

func (x *IntervalValue) GetNsec() int64 {
	if x != nil {
		return x.Nsec
	}
	return 0
}

func (x *IntervalValue) GetAdjust() IntervalValue_IntervalAdjust {
	if x != nil {
		return x.Adjust
	}
	return IntervalValue_INTERVAL_ADJUST_NONE
}

// Arbitrary value that can be serialized to be sent over the network or
// stored in the database.
type Value struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Kind:
	//
	//	*Value_UnsignedValue
	//	*Value_StringValue
	//	*Value_NumberValue
	//	*Value_IntegerValue
	//	*Value_BooleanValue
	//	*Value_VarbinaryValue
	//	*Value_DecimalValue
	//	*Value_UuidValue
	//	*Value_DatetimeValue
	//	*Value_IntervalValue
	//	*Value_ArrayValue
	//	*Value_MapValue
	//	*Value_NullValue
	Kind          isValue_Kind `protobuf_oneof:"kind"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Value) Reset() {
	*x = Value{}
	mi := &file_aeon_value_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_aeon_value_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_aeon_value_proto_rawDescGZIP(), []int{4}
}

func (x *Value) GetKind() isValue_Kind {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *Value) GetUnsignedValue() uint64 {
	if x != nil {
		if x, ok := x.Kind.(*Value_UnsignedValue); ok {
			return x.UnsignedValue
		}
	}
	return 0
}

func (x *Value) GetStringValue() string {
	if x != nil {
		if x, ok := x.Kind.(*Value_StringValue); ok {
			return x.StringValue
		}
	}
	return ""
}

func (x *Value) GetNumberValue() float64 {
	if x != nil {
		if x, ok := x.Kind.(*Value_NumberValue); ok {
			return x.NumberValue
		}
	}
	return 0
}

func (x *Value) GetIntegerValue() int64 {
	if x != nil {
		if x, ok := x.Kind.(*Value_IntegerValue); ok {
			return x.IntegerValue
		}
	}
	return 0
}

func (x *Value) GetBooleanValue() bool {
	if x != nil {
		if x, ok := x.Kind.(*Value_BooleanValue); ok {
			return x.BooleanValue
		}
	}
	return false
}

func (x *Value) GetVarbinaryValue() []byte {
	if x != nil {
		if x, ok := x.Kind.(*Value_VarbinaryValue); ok {
			return x.VarbinaryValue
		}
	}
	return nil
}

func (x *Value) GetDecimalValue() string {
	if x != nil {
		if x, ok := x.Kind.(*Value_DecimalValue); ok {
			return x.DecimalValue
		}
	}
	return ""
}

func (x *Value) GetUuidValue() string {
	if x != nil {
		if x, ok := x.Kind.(*Value_UuidValue); ok {
			return x.UuidValue
		}
	}
	return ""
}

func (x *Value) GetDatetimeValue() *DateTimeValue {
	if x != nil {
		if x, ok := x.Kind.(*Value_DatetimeValue); ok {
			return x.DatetimeValue
		}
	}
	return nil
}

func (x *Value) GetIntervalValue() *IntervalValue {
	if x != nil {
		if x, ok := x.Kind.(*Value_IntervalValue); ok {
			return x.IntervalValue
		}
	}
	return nil
}

func (x *Value) GetArrayValue() *ArrayValue {
	if x != nil {
		if x, ok := x.Kind.(*Value_ArrayValue); ok {
			return x.ArrayValue
		}
	}
	return nil
}

func (x *Value) GetMapValue() *MapValue {
	if x != nil {
		if x, ok := x.Kind.(*Value_MapValue); ok {
			return x.MapValue
		}
	}
	return nil
}

func (x *Value) GetNullValue() NullValue {
	if x != nil {
		if x, ok := x.Kind.(*Value_NullValue); ok {
			return x.NullValue
		}
	}
	return NullValue_NULL_VALUE
}

type isValue_Kind interface {
	isValue_Kind()
}

type Value_UnsignedValue struct {
	UnsignedValue uint64 `protobuf:"varint,1,opt,name=unsigned_value,json=unsignedValue,proto3,oneof"`
}

type Value_StringValue struct {
	StringValue string `protobuf:"bytes,2,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type Value_NumberValue struct {
	NumberValue float64 `protobuf:"fixed64,3,opt,name=number_value,json=numberValue,proto3,oneof"`
}

type Value_IntegerValue struct {
	IntegerValue int64 `protobuf:"zigzag64,4,opt,name=integer_value,json=integerValue,proto3,oneof"`
}

type Value_BooleanValue struct {
	BooleanValue bool `protobuf:"varint,5,opt,name=boolean_value,json=booleanValue,proto3,oneof"`
}

type Value_VarbinaryValue struct {
	VarbinaryValue []byte `protobuf:"bytes,6,opt,name=varbinary_value,json=varbinaryValue,proto3,oneof"`
}

type Value_DecimalValue struct {
	DecimalValue string `protobuf:"bytes,7,opt,name=decimal_value,json=decimalValue,proto3,oneof"`
}

type Value_UuidValue struct {
	UuidValue string `protobuf:"bytes,8,opt,name=uuid_value,json=uuidValue,proto3,oneof"`
}

type Value_DatetimeValue struct {
	DatetimeValue *DateTimeValue `protobuf:"bytes,9,opt,name=datetime_value,json=datetimeValue,proto3,oneof"`
}

type Value_IntervalValue struct {
	IntervalValue *IntervalValue `protobuf:"bytes,10,opt,name=interval_value,json=intervalValue,proto3,oneof"`
}

type Value_ArrayValue struct {
	ArrayValue *ArrayValue `protobuf:"bytes,11,opt,name=array_value,json=arrayValue,proto3,oneof"`
}

type Value_MapValue struct {
	MapValue *MapValue `protobuf:"bytes,12,opt,name=map_value,json=mapValue,proto3,oneof"`
}

type Value_NullValue struct {
	NullValue NullValue `protobuf:"varint,13,opt,name=null_value,json=nullValue,proto3,enum=aeon.NullValue,oneof"`
}

func (*Value_UnsignedValue) isValue_Kind() {}

func (*Value_StringValue) isValue_Kind() {}

func (*Value_NumberValue) isValue_Kind() {}

func (*Value_IntegerValue) isValue_Kind() {}

func (*Value_BooleanValue) isValue_Kind() {}

func (*Value_VarbinaryValue) isValue_Kind() {}

func (*Value_DecimalValue) isValue_Kind() {}

func (*Value_UuidValue) isValue_Kind() {}

func (*Value_DatetimeValue) isValue_Kind() {}

func (*Value_IntervalValue) isValue_Kind() {}

func (*Value_ArrayValue) isValue_Kind() {}

func (*Value_MapValue) isValue_Kind() {}

func (*Value_NullValue) isValue_Kind() {}

var File_aeon_value_proto protoreflect.FileDescriptor

var file_aeon_value_proto_rawDesc = []byte{
	0x0a, 0x10, 0x61, 0x65, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x04, 0x61, 0x65, 0x6f, 0x6e, 0x22, 0x31, 0x0a, 0x0a, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x08,
	0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e,
	0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x46, 0x0a, 0x0b,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x21, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61,
	0x65, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x59, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x73, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6e,
	0x73, 0x65, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xc9, 0x02, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x77,
	0x65, 0x65, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x12,
	0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x64, 0x61,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x63, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x73, 0x65,
	0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6e, 0x73, 0x65, 0x63, 0x12, 0x3a, 0x0a,
	0x06, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x61, 0x65, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x41, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x52, 0x06, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x22, 0x60, 0x0a, 0x0e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x14, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x41, 0x44, 0x4a, 0x55, 0x53, 0x54, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41,
	0x4c, 0x5f, 0x41, 0x44, 0x4a, 0x55, 0x53, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x01, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x41, 0x44,
	0x4a, 0x55, 0x53, 0x54, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x02, 0x22, 0xd5, 0x04, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52,
	0x0d, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23,
	0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x12, 0x48,
	0x00, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x25, 0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x76, 0x61, 0x72, 0x62, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x0e, 0x76, 0x61, 0x72, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x25, 0x0a, 0x0d, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x75, 0x75, 0x69, 0x64,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09,
	0x75, 0x75, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a, 0x0e, 0x64, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x65, 0x6f,
	0x6e, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0a,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x6d, 0x61,
	0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x61, 0x65, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x6d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x6e, 0x75, 0x6c,
	0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x61, 0x65, 0x6f, 0x6e, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x09, 0x6e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x2a, 0x1b, 0x0a, 0x09, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x00,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_aeon_value_proto_rawDescOnce sync.Once
	file_aeon_value_proto_rawDescData = file_aeon_value_proto_rawDesc
)

func file_aeon_value_proto_rawDescGZIP() []byte {
	file_aeon_value_proto_rawDescOnce.Do(func() {
		file_aeon_value_proto_rawDescData = protoimpl.X.CompressGZIP(file_aeon_value_proto_rawDescData)
	})
	return file_aeon_value_proto_rawDescData
}

var file_aeon_value_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_aeon_value_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_aeon_value_proto_goTypes = []any{
	(NullValue)(0),                    // 0: aeon.NullValue
	(IntervalValue_IntervalAdjust)(0), // 1: aeon.IntervalValue.IntervalAdjust
	(*ArrayValue)(nil),                // 2: aeon.ArrayValue
	(*MapValue)(nil),                  // 3: aeon.MapValue
	(*DateTimeValue)(nil),             // 4: aeon.DateTimeValue
	(*IntervalValue)(nil),             // 5: aeon.IntervalValue
	(*Value)(nil),                     // 6: aeon.Value
	nil,                               // 7: aeon.MapValue.FieldsEntry
}
var file_aeon_value_proto_depIdxs = []int32{
	6, // 0: aeon.ArrayValue.fields:type_name -> aeon.Value
	7, // 1: aeon.MapValue.fields:type_name -> aeon.MapValue.FieldsEntry
	1, // 2: aeon.IntervalValue.adjust:type_name -> aeon.IntervalValue.IntervalAdjust
	4, // 3: aeon.Value.datetime_value:type_name -> aeon.DateTimeValue
	5, // 4: aeon.Value.interval_value:type_name -> aeon.IntervalValue
	2, // 5: aeon.Value.array_value:type_name -> aeon.ArrayValue
	3, // 6: aeon.Value.map_value:type_name -> aeon.MapValue
	0, // 7: aeon.Value.null_value:type_name -> aeon.NullValue
	6, // 8: aeon.MapValue.FieldsEntry.value:type_name -> aeon.Value
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_aeon_value_proto_init() }
func file_aeon_value_proto_init() {
	if File_aeon_value_proto != nil {
		return
	}
	file_aeon_value_proto_msgTypes[4].OneofWrappers = []any{
		(*Value_UnsignedValue)(nil),
		(*Value_StringValue)(nil),
		(*Value_NumberValue)(nil),
		(*Value_IntegerValue)(nil),
		(*Value_BooleanValue)(nil),
		(*Value_VarbinaryValue)(nil),
		(*Value_DecimalValue)(nil),
		(*Value_UuidValue)(nil),
		(*Value_DatetimeValue)(nil),
		(*Value_IntervalValue)(nil),
		(*Value_ArrayValue)(nil),
		(*Value_MapValue)(nil),
		(*Value_NullValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aeon_value_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_aeon_value_proto_goTypes,
		DependencyIndexes: file_aeon_value_proto_depIdxs,
		EnumInfos:         file_aeon_value_proto_enumTypes,
		MessageInfos:      file_aeon_value_proto_msgTypes,
	}.Build()
	File_aeon_value_proto = out.File
	file_aeon_value_proto_rawDesc = nil
	file_aeon_value_proto_goTypes = nil
	file_aeon_value_proto_depIdxs = nil
}
