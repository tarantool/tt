// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        v5.28.3
// source: aeon_crud.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SelectIterator int32

const (
	SelectIterator_SELECT_ITERATOR_GT SelectIterator = 0
	SelectIterator_SELECT_ITERATOR_GE SelectIterator = 1
	SelectIterator_SELECT_ITERATOR_LT SelectIterator = 2
	SelectIterator_SELECT_ITERATOR_LE SelectIterator = 3
	SelectIterator_SELECT_ITERATOR_PP SelectIterator = 4
	SelectIterator_SELECT_ITERATOR_NP SelectIterator = 5
)

// Enum value maps for SelectIterator.
var (
	SelectIterator_name = map[int32]string{
		0: "SELECT_ITERATOR_GT",
		1: "SELECT_ITERATOR_GE",
		2: "SELECT_ITERATOR_LT",
		3: "SELECT_ITERATOR_LE",
		4: "SELECT_ITERATOR_PP",
		5: "SELECT_ITERATOR_NP",
	}
	SelectIterator_value = map[string]int32{
		"SELECT_ITERATOR_GT": 0,
		"SELECT_ITERATOR_GE": 1,
		"SELECT_ITERATOR_LT": 2,
		"SELECT_ITERATOR_LE": 3,
		"SELECT_ITERATOR_PP": 4,
		"SELECT_ITERATOR_NP": 5,
	}
)

func (x SelectIterator) Enum() *SelectIterator {
	p := new(SelectIterator)
	*p = x
	return p
}

func (x SelectIterator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SelectIterator) Descriptor() protoreflect.EnumDescriptor {
	return file_aeon_crud_proto_enumTypes[0].Descriptor()
}

func (SelectIterator) Type() protoreflect.EnumType {
	return &file_aeon_crud_proto_enumTypes[0]
}

func (x SelectIterator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SelectIterator.Descriptor instead.
func (SelectIterator) EnumDescriptor() ([]byte, []int) {
	return file_aeon_crud_proto_rawDescGZIP(), []int{0}
}

type ExecuteRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Array of read operations.
	ReadSet []*Operation `protobuf:"bytes,1,rep,name=read_set,json=readSet,proto3" json:"read_set,omitempty"`
	// Array of write operations.
	WriteSet []*Operation `protobuf:"bytes,2,rep,name=write_set,json=writeSet,proto3" json:"write_set,omitempty"`
	// Source code of a Lua function that will be used to update the write
	// operations. It's optional: if not set, the write operations will be
	// executed as is.
	//
	// The function is passed three arguments: the read set with filled tuples,
	// the original write set, and the optional extra argument set by the caller
	// (see below). If the function raises an error, the transaction will be
	// aborted, otherwise it will apply the write set. The function may update
	// the tuples in write operations (in-place), but it may not add or delete
	// operations or update the target spaces or keys.
	//
	// A read/write operation is passed in an array: {space, key, tuple}.
	// (without string key names).
	//
	// Below is an example of a Lua function that inserts tuples only if there
	// are no tuples with the same keys, otherwise returns the existing tuples.
	// It's supposed to be passed read and write sets with the same keys.
	//
	// function(read_set, write_set, flags)
	//
	//	local exists = {}
	//	for _, op in pairs(read_set) do
	//	    if op[3] ~= nil then
	//	        table.insert(exists, op[3])
	//	    end
	//	end
	//	if #exists > 0 then
	//	    for _, op in pairs(write_set) do
	//	        op[3] = nil
	//	    end
	//	end
	//	return {exists = exists}
	//
	// end
	Func string `protobuf:"bytes,3,opt,name=func,proto3" json:"func,omitempty"`
	// Argument passed to the user-defined function. Optional.
	FuncArg *Value `protobuf:"bytes,4,opt,name=func_arg,json=funcArg,proto3" json:"func_arg,omitempty"`
	// Map : space name -> key format.
	// Contains formats of all provided keys. Optional.
	KeyFormats map[string]*TupleFormat `protobuf:"bytes,5,rep,name=key_formats,json=keyFormats,proto3" json:"key_formats,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Map : space name -> tuple format.
	// Contains formats of all provided tuples. Optional.
	TupleFormats  map[string]*TupleFormat `protobuf:"bytes,6,rep,name=tuple_formats,json=tupleFormats,proto3" json:"tuple_formats,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecuteRequest) Reset() {
	*x = ExecuteRequest{}
	mi := &file_aeon_crud_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteRequest) ProtoMessage() {}

func (x *ExecuteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aeon_crud_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteRequest.ProtoReflect.Descriptor instead.
func (*ExecuteRequest) Descriptor() ([]byte, []int) {
	return file_aeon_crud_proto_rawDescGZIP(), []int{0}
}

func (x *ExecuteRequest) GetReadSet() []*Operation {
	if x != nil {
		return x.ReadSet
	}
	return nil
}

func (x *ExecuteRequest) GetWriteSet() []*Operation {
	if x != nil {
		return x.WriteSet
	}
	return nil
}

func (x *ExecuteRequest) GetFunc() string {
	if x != nil {
		return x.Func
	}
	return ""
}

func (x *ExecuteRequest) GetFuncArg() *Value {
	if x != nil {
		return x.FuncArg
	}
	return nil
}

func (x *ExecuteRequest) GetKeyFormats() map[string]*TupleFormat {
	if x != nil {
		return x.KeyFormats
	}
	return nil
}

func (x *ExecuteRequest) GetTupleFormats() map[string]*TupleFormat {
	if x != nil {
		return x.TupleFormats
	}
	return nil
}

type ExecuteResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Error information. Set only on failure.
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// Array of executed read operations (with filled tuples).
	ReadSet []*Operation `protobuf:"bytes,2,rep,name=read_set,json=readSet,proto3" json:"read_set,omitempty"`
	// Array of executed write operations (updated by the user-defined function).
	WriteSet []*Operation `protobuf:"bytes,3,rep,name=write_set,json=writeSet,proto3" json:"write_set,omitempty"`
	// Value returned by the user-defined function.
	FuncRet *Value `protobuf:"bytes,4,opt,name=func_ret,json=funcRet,proto3" json:"func_ret,omitempty"`
	// Map : space name -> tuple format.
	// Contains formats of all returned tuples.
	TupleFormats  map[string]*TupleFormat `protobuf:"bytes,5,rep,name=tuple_formats,json=tupleFormats,proto3" json:"tuple_formats,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecuteResponse) Reset() {
	*x = ExecuteResponse{}
	mi := &file_aeon_crud_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteResponse) ProtoMessage() {}

func (x *ExecuteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aeon_crud_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteResponse.ProtoReflect.Descriptor instead.
func (*ExecuteResponse) Descriptor() ([]byte, []int) {
	return file_aeon_crud_proto_rawDescGZIP(), []int{1}
}

func (x *ExecuteResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ExecuteResponse) GetReadSet() []*Operation {
	if x != nil {
		return x.ReadSet
	}
	return nil
}

func (x *ExecuteResponse) GetWriteSet() []*Operation {
	if x != nil {
		return x.WriteSet
	}
	return nil
}

func (x *ExecuteResponse) GetFuncRet() *Value {
	if x != nil {
		return x.FuncRet
	}
	return nil
}

func (x *ExecuteResponse) GetTupleFormats() map[string]*TupleFormat {
	if x != nil {
		return x.TupleFormats
	}
	return nil
}

type InsertRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Target space name.
	Space string `protobuf:"bytes,1,opt,name=space,proto3" json:"space,omitempty"`
	// Tuples to insert into the space.
	Tuples []*Tuple `protobuf:"bytes,2,rep,name=tuples,proto3" json:"tuples,omitempty"`
	// Optional flags, see above.
	Flags *InsertRequest_InsertFlags `protobuf:"bytes,3,opt,name=flags,proto3" json:"flags,omitempty"`
	// Format of the provided tuples. Optional.
	TupleFormat   *TupleFormat `protobuf:"bytes,4,opt,name=tuple_format,json=tupleFormat,proto3" json:"tuple_format,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InsertRequest) Reset() {
	*x = InsertRequest{}
	mi := &file_aeon_crud_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InsertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertRequest) ProtoMessage() {}

func (x *InsertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aeon_crud_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertRequest.ProtoReflect.Descriptor instead.
func (*InsertRequest) Descriptor() ([]byte, []int) {
	return file_aeon_crud_proto_rawDescGZIP(), []int{2}
}

func (x *InsertRequest) GetSpace() string {
	if x != nil {
		return x.Space
	}
	return ""
}

func (x *InsertRequest) GetTuples() []*Tuple {
	if x != nil {
		return x.Tuples
	}
	return nil
}

func (x *InsertRequest) GetFlags() *InsertRequest_InsertFlags {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *InsertRequest) GetTupleFormat() *TupleFormat {
	if x != nil {
		return x.TupleFormat
	}
	return nil
}

type InsertResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Error information. Set only on failure.
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// Inserted (new) tuples (only if return_tuples flag was set).
	Tuples []*Tuple `protobuf:"bytes,2,rep,name=tuples,proto3" json:"tuples,omitempty"`
	// Format of the returned tuples.
	TupleFormat   *TupleFormat `protobuf:"bytes,3,opt,name=tuple_format,json=tupleFormat,proto3" json:"tuple_format,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InsertResponse) Reset() {
	*x = InsertResponse{}
	mi := &file_aeon_crud_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InsertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertResponse) ProtoMessage() {}

func (x *InsertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aeon_crud_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertResponse.ProtoReflect.Descriptor instead.
func (*InsertResponse) Descriptor() ([]byte, []int) {
	return file_aeon_crud_proto_rawDescGZIP(), []int{3}
}

func (x *InsertResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *InsertResponse) GetTuples() []*Tuple {
	if x != nil {
		return x.Tuples
	}
	return nil
}

func (x *InsertResponse) GetTupleFormat() *TupleFormat {
	if x != nil {
		return x.TupleFormat
	}
	return nil
}

type ReplaceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Target space name.
	Space string `protobuf:"bytes,1,opt,name=space,proto3" json:"space,omitempty"`
	// Tuple to replace in the space.
	Tuples []*Tuple `protobuf:"bytes,2,rep,name=tuples,proto3" json:"tuples,omitempty"`
	// Optional flags, see above.
	Flags *ReplaceRequest_ReplaceFlags `protobuf:"bytes,3,opt,name=flags,proto3" json:"flags,omitempty"`
	// Format of the provided tuples. Optional.
	TupleFormat   *TupleFormat `protobuf:"bytes,4,opt,name=tuple_format,json=tupleFormat,proto3" json:"tuple_format,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplaceRequest) Reset() {
	*x = ReplaceRequest{}
	mi := &file_aeon_crud_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceRequest) ProtoMessage() {}

func (x *ReplaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aeon_crud_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceRequest.ProtoReflect.Descriptor instead.
func (*ReplaceRequest) Descriptor() ([]byte, []int) {
	return file_aeon_crud_proto_rawDescGZIP(), []int{4}
}

func (x *ReplaceRequest) GetSpace() string {
	if x != nil {
		return x.Space
	}
	return ""
}

func (x *ReplaceRequest) GetTuples() []*Tuple {
	if x != nil {
		return x.Tuples
	}
	return nil
}

func (x *ReplaceRequest) GetFlags() *ReplaceRequest_ReplaceFlags {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *ReplaceRequest) GetTupleFormat() *TupleFormat {
	if x != nil {
		return x.TupleFormat
	}
	return nil
}

type ReplaceResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Error information. Set only on failure.
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// Inserted (new) tuples (only if return_tuples flag was set).
	Tuples []*Tuple `protobuf:"bytes,2,rep,name=tuples,proto3" json:"tuples,omitempty"`
	// Format of the returned tuples.
	TupleFormat   *TupleFormat `protobuf:"bytes,3,opt,name=tuple_format,json=tupleFormat,proto3" json:"tuple_format,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplaceResponse) Reset() {
	*x = ReplaceResponse{}
	mi := &file_aeon_crud_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceResponse) ProtoMessage() {}

func (x *ReplaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aeon_crud_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceResponse.ProtoReflect.Descriptor instead.
func (*ReplaceResponse) Descriptor() ([]byte, []int) {
	return file_aeon_crud_proto_rawDescGZIP(), []int{5}
}

func (x *ReplaceResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ReplaceResponse) GetTuples() []*Tuple {
	if x != nil {
		return x.Tuples
	}
	return nil
}

func (x *ReplaceResponse) GetTupleFormat() *TupleFormat {
	if x != nil {
		return x.TupleFormat
	}
	return nil
}

type DeleteRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Target space name.
	Space string `protobuf:"bytes,1,opt,name=space,proto3" json:"space,omitempty"`
	// Keys to delete from the space.
	Keys []*Tuple `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	// Optional flags, see above.
	Flags *DeleteRequest_DeleteFlags `protobuf:"bytes,3,opt,name=flags,proto3" json:"flags,omitempty"`
	// Format of the provided keys. Optional.
	KeyFormat     *TupleFormat `protobuf:"bytes,4,opt,name=key_format,json=keyFormat,proto3" json:"key_format,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	mi := &file_aeon_crud_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aeon_crud_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_aeon_crud_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteRequest) GetSpace() string {
	if x != nil {
		return x.Space
	}
	return ""
}

func (x *DeleteRequest) GetKeys() []*Tuple {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *DeleteRequest) GetFlags() *DeleteRequest_DeleteFlags {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *DeleteRequest) GetKeyFormat() *TupleFormat {
	if x != nil {
		return x.KeyFormat
	}
	return nil
}

type DeleteResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Error information. Set only on failure.
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// Deleted (old) tuples (only if return_tuples flag was set).
	Tuples []*Tuple `protobuf:"bytes,2,rep,name=tuples,proto3" json:"tuples,omitempty"`
	// Format of the returned tuples.
	TupleFormat   *TupleFormat `protobuf:"bytes,3,opt,name=tuple_format,json=tupleFormat,proto3" json:"tuple_format,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteResponse) Reset() {
	*x = DeleteResponse{}
	mi := &file_aeon_crud_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponse) ProtoMessage() {}

func (x *DeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aeon_crud_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponse.ProtoReflect.Descriptor instead.
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return file_aeon_crud_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *DeleteResponse) GetTuples() []*Tuple {
	if x != nil {
		return x.Tuples
	}
	return nil
}

func (x *DeleteResponse) GetTupleFormat() *TupleFormat {
	if x != nil {
		return x.TupleFormat
	}
	return nil
}

type GetRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Target space name.
	Space string `protobuf:"bytes,1,opt,name=space,proto3" json:"space,omitempty"`
	// Keys to query from the space.
	Keys []*Tuple `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	// Format of the provided keys. Optional.
	KeyFormat     *TupleFormat `protobuf:"bytes,3,opt,name=key_format,json=keyFormat,proto3" json:"key_format,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	mi := &file_aeon_crud_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aeon_crud_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_aeon_crud_proto_rawDescGZIP(), []int{8}
}

func (x *GetRequest) GetSpace() string {
	if x != nil {
		return x.Space
	}
	return ""
}

func (x *GetRequest) GetKeys() []*Tuple {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *GetRequest) GetKeyFormat() *TupleFormat {
	if x != nil {
		return x.KeyFormat
	}
	return nil
}

type GetResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Error information. Set only on failure.
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// Retrieved tuples.
	Tuples []*Tuple `protobuf:"bytes,2,rep,name=tuples,proto3" json:"tuples,omitempty"`
	// Format of the returned tuples.
	TupleFormat   *TupleFormat `protobuf:"bytes,3,opt,name=tuple_format,json=tupleFormat,proto3" json:"tuple_format,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetResponse) Reset() {
	*x = GetResponse{}
	mi := &file_aeon_crud_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResponse) ProtoMessage() {}

func (x *GetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aeon_crud_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResponse.ProtoReflect.Descriptor instead.
func (*GetResponse) Descriptor() ([]byte, []int) {
	return file_aeon_crud_proto_rawDescGZIP(), []int{9}
}

func (x *GetResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetResponse) GetTuples() []*Tuple {
	if x != nil {
		return x.Tuples
	}
	return nil
}

func (x *GetResponse) GetTupleFormat() *TupleFormat {
	if x != nil {
		return x.TupleFormat
	}
	return nil
}

type SelectRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Target space name.
	Space string `protobuf:"bytes,1,opt,name=space,proto3" json:"space,omitempty"`
	// Key or partial key to query from the space.
	Key *Tuple `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// The type of iterator to use in the select.
	Iterator SelectIterator `protobuf:"varint,3,opt,name=iterator,proto3,enum=aeon.SelectIterator" json:"iterator,omitempty"`
	// Max number of tuples to return.
	Limit uint64 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	// Max number of function calls allowed.
	CallsLimit uint64 `protobuf:"varint,5,opt,name=calls_limit,json=callsLimit,proto3" json:"calls_limit,omitempty"`
	// Function callback that allows to control output values. The function
	// receives the following arguments: tuple, tuple_key (extracted key from
	// the tuple) and func_arg. The callback must return:
	// - key - for the next iteration,
	// - iterator - for the next iteration,
	// - tuple (or nil) - to store in the result set,
	// - eof flag (true or false) - to stop all iterations if true.
	Func string `protobuf:"bytes,6,opt,name=func,proto3" json:"func,omitempty"`
	// Function argument.
	FuncArg *Value `protobuf:"bytes,7,opt,name=func_arg,json=funcArg,proto3" json:"func_arg,omitempty"`
	// Max number of tuples in each response.
	ChunkSize     uint64 `protobuf:"varint,8,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SelectRequest) Reset() {
	*x = SelectRequest{}
	mi := &file_aeon_crud_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SelectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectRequest) ProtoMessage() {}

func (x *SelectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aeon_crud_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectRequest.ProtoReflect.Descriptor instead.
func (*SelectRequest) Descriptor() ([]byte, []int) {
	return file_aeon_crud_proto_rawDescGZIP(), []int{10}
}

func (x *SelectRequest) GetSpace() string {
	if x != nil {
		return x.Space
	}
	return ""
}

func (x *SelectRequest) GetKey() *Tuple {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *SelectRequest) GetIterator() SelectIterator {
	if x != nil {
		return x.Iterator
	}
	return SelectIterator_SELECT_ITERATOR_GT
}

func (x *SelectRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SelectRequest) GetCallsLimit() uint64 {
	if x != nil {
		return x.CallsLimit
	}
	return 0
}

func (x *SelectRequest) GetFunc() string {
	if x != nil {
		return x.Func
	}
	return ""
}

func (x *SelectRequest) GetFuncArg() *Value {
	if x != nil {
		return x.FuncArg
	}
	return nil
}

func (x *SelectRequest) GetChunkSize() uint64 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

type SelectResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Error information. Set only on failure.
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// Retrieved tuples in the chunk.
	Tuples []*Tuple `protobuf:"bytes,2,rep,name=tuples,proto3" json:"tuples,omitempty"`
	// Number of calls in the chunk.
	Calls int64 `protobuf:"varint,3,opt,name=calls,proto3" json:"calls,omitempty"`
	// Number of roundtrips done to get all returned tuples.
	Roundtrips int64 `protobuf:"varint,4,opt,name=roundtrips,proto3" json:"roundtrips,omitempty"`
	// Key for the next chunk.
	Key *Tuple `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	// Iterator for the next chunk.
	Iterator SelectIterator `protobuf:"varint,6,opt,name=iterator,proto3,enum=aeon.SelectIterator" json:"iterator,omitempty"`
	// True if there are no more tuples left, false otherwise.
	IsEof bool `protobuf:"varint,7,opt,name=is_eof,json=isEof,proto3" json:"is_eof,omitempty"`
	// Format of the returned tuples.
	TupleFormat   *TupleFormat `protobuf:"bytes,8,opt,name=tuple_format,json=tupleFormat,proto3" json:"tuple_format,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SelectResponse) Reset() {
	*x = SelectResponse{}
	mi := &file_aeon_crud_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SelectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectResponse) ProtoMessage() {}

func (x *SelectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aeon_crud_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectResponse.ProtoReflect.Descriptor instead.
func (*SelectResponse) Descriptor() ([]byte, []int) {
	return file_aeon_crud_proto_rawDescGZIP(), []int{11}
}

func (x *SelectResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *SelectResponse) GetTuples() []*Tuple {
	if x != nil {
		return x.Tuples
	}
	return nil
}

func (x *SelectResponse) GetCalls() int64 {
	if x != nil {
		return x.Calls
	}
	return 0
}

func (x *SelectResponse) GetRoundtrips() int64 {
	if x != nil {
		return x.Roundtrips
	}
	return 0
}

func (x *SelectResponse) GetKey() *Tuple {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *SelectResponse) GetIterator() SelectIterator {
	if x != nil {
		return x.Iterator
	}
	return SelectIterator_SELECT_ITERATOR_GT
}

func (x *SelectResponse) GetIsEof() bool {
	if x != nil {
		return x.IsEof
	}
	return false
}

func (x *SelectResponse) GetTupleFormat() *TupleFormat {
	if x != nil {
		return x.TupleFormat
	}
	return nil
}

type InsertRequest_InsertFlags struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If set, return the inserted (new) tuples.
	ReturnTuples  bool `protobuf:"varint,1,opt,name=return_tuples,json=returnTuples,proto3" json:"return_tuples,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InsertRequest_InsertFlags) Reset() {
	*x = InsertRequest_InsertFlags{}
	mi := &file_aeon_crud_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InsertRequest_InsertFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertRequest_InsertFlags) ProtoMessage() {}

func (x *InsertRequest_InsertFlags) ProtoReflect() protoreflect.Message {
	mi := &file_aeon_crud_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertRequest_InsertFlags.ProtoReflect.Descriptor instead.
func (*InsertRequest_InsertFlags) Descriptor() ([]byte, []int) {
	return file_aeon_crud_proto_rawDescGZIP(), []int{2, 0}
}

func (x *InsertRequest_InsertFlags) GetReturnTuples() bool {
	if x != nil {
		return x.ReturnTuples
	}
	return false
}

type ReplaceRequest_ReplaceFlags struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If set, return the inserted (new) tuples.
	ReturnTuples  bool `protobuf:"varint,1,opt,name=return_tuples,json=returnTuples,proto3" json:"return_tuples,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplaceRequest_ReplaceFlags) Reset() {
	*x = ReplaceRequest_ReplaceFlags{}
	mi := &file_aeon_crud_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplaceRequest_ReplaceFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceRequest_ReplaceFlags) ProtoMessage() {}

func (x *ReplaceRequest_ReplaceFlags) ProtoReflect() protoreflect.Message {
	mi := &file_aeon_crud_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceRequest_ReplaceFlags.ProtoReflect.Descriptor instead.
func (*ReplaceRequest_ReplaceFlags) Descriptor() ([]byte, []int) {
	return file_aeon_crud_proto_rawDescGZIP(), []int{4, 0}
}

func (x *ReplaceRequest_ReplaceFlags) GetReturnTuples() bool {
	if x != nil {
		return x.ReturnTuples
	}
	return false
}

type DeleteRequest_DeleteFlags struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If set, return the deleted (old) tuples.
	ReturnTuples  bool `protobuf:"varint,1,opt,name=return_tuples,json=returnTuples,proto3" json:"return_tuples,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRequest_DeleteFlags) Reset() {
	*x = DeleteRequest_DeleteFlags{}
	mi := &file_aeon_crud_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRequest_DeleteFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest_DeleteFlags) ProtoMessage() {}

func (x *DeleteRequest_DeleteFlags) ProtoReflect() protoreflect.Message {
	mi := &file_aeon_crud_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest_DeleteFlags.ProtoReflect.Descriptor instead.
func (*DeleteRequest_DeleteFlags) Descriptor() ([]byte, []int) {
	return file_aeon_crud_proto_rawDescGZIP(), []int{6, 0}
}

func (x *DeleteRequest_DeleteFlags) GetReturnTuples() bool {
	if x != nil {
		return x.ReturnTuples
	}
	return false
}

var File_aeon_crud_proto protoreflect.FileDescriptor

var file_aeon_crud_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x61, 0x65, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x04, 0x61, 0x65, 0x6f, 0x6e, 0x1a, 0x10, 0x61, 0x65, 0x6f, 0x6e, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x61, 0x65, 0x6f, 0x6e, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x61, 0x65, 0x6f,
	0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe0,
	0x03, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x72, 0x65, 0x61, 0x64, 0x53, 0x65, 0x74, 0x12, 0x2c, 0x0a,
	0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x75, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x75, 0x6e, 0x63, 0x12,
	0x26, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x5f, 0x61, 0x72, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x66, 0x75, 0x6e, 0x63, 0x41, 0x72, 0x67, 0x12, 0x45, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61,
	0x65, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x6b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x4b,
	0x0a, 0x0d, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x75, 0x70, 0x6c,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x74,
	0x75, 0x70, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x1a, 0x50, 0x0a, 0x0f, 0x4b,
	0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x52, 0x0a,
	0x11, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xd8, 0x02, 0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x65, 0x6f,
	0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x72, 0x65, 0x61,
	0x64, 0x53, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53,
	0x65, 0x74, 0x12, 0x26, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x5f, 0x72, 0x65, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x66, 0x75, 0x6e, 0x63, 0x52, 0x65, 0x74, 0x12, 0x4c, 0x0a, 0x0d, 0x74, 0x75,
	0x70, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x74, 0x75, 0x70, 0x6c,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x1a, 0x52, 0x0a, 0x11, 0x54, 0x75, 0x70, 0x6c,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xeb, 0x01, 0x0a,
	0x0d, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e, 0x54, 0x75, 0x70, 0x6c,
	0x65, 0x52, 0x06, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x34, 0x0a, 0x0c, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e, 0x54, 0x75,
	0x70, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0b, 0x74, 0x75, 0x70, 0x6c, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x1a, 0x32, 0x0a, 0x0b, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f,
	0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x0e, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61,
	0x65, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x23, 0x0a, 0x06, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x06, 0x74,
	0x75, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x0c, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x65,
	0x6f, 0x6e, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0b,
	0x74, 0x75, 0x70, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0xef, 0x01, 0x0a, 0x0e,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e, 0x54, 0x75, 0x70, 0x6c,
	0x65, 0x52, 0x06, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x34, 0x0a, 0x0c, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e,
	0x54, 0x75, 0x70, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0b, 0x74, 0x75, 0x70,
	0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x1a, 0x33, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x5f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x22, 0x8f, 0x01,
	0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x06, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e, 0x54, 0x75, 0x70, 0x6c,
	0x65, 0x52, 0x06, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x0c, 0x74, 0x75, 0x70,
	0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x52, 0x0b, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22,
	0xe3, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e, 0x54, 0x75, 0x70,
	0x6c, 0x65, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x35, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x30, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x1a, 0x32, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x74, 0x75, 0x70, 0x6c, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54,
	0x75, 0x70, 0x6c, 0x65, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x06, 0x74,
	0x75, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x65,
	0x6f, 0x6e, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x06, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73,
	0x12, 0x34, 0x0a, 0x0c, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e, 0x54, 0x75,
	0x70, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0b, 0x74, 0x75, 0x70, 0x6c, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x75, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x6b, 0x65,
	0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e,
	0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x6b,
	0x65, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x8b, 0x01,
	0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61,
	0x65, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x23, 0x0a, 0x06, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x06, 0x74,
	0x75, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x0c, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x65,
	0x6f, 0x6e, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0b,
	0x74, 0x75, 0x70, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x88, 0x02, 0x0a, 0x0d,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x30, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61,
	0x6c, 0x6c, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x75, 0x6e, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x75, 0x6e, 0x63, 0x12,
	0x26, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x5f, 0x61, 0x72, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x66, 0x75, 0x6e, 0x63, 0x41, 0x72, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xac, 0x02, 0x0a, 0x0e, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x06,
	0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61,
	0x65, 0x6f, 0x6e, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x06, 0x74, 0x75, 0x70, 0x6c, 0x65,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x74, 0x72, 0x69, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x74, 0x72, 0x69, 0x70, 0x73, 0x12, 0x1d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e, 0x54, 0x75, 0x70, 0x6c,
	0x65, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08,
	0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x65,
	0x6f, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x45, 0x6f, 0x66, 0x12,
	0x34, 0x0a, 0x0c, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e, 0x54, 0x75, 0x70,
	0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0b, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2a, 0xa0, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x45, 0x4c, 0x45,
	0x43, 0x54, 0x5f, 0x49, 0x54, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x47, 0x54, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x49, 0x54, 0x45, 0x52, 0x41,
	0x54, 0x4f, 0x52, 0x5f, 0x47, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x45, 0x4c, 0x45,
	0x43, 0x54, 0x5f, 0x49, 0x54, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4c, 0x54, 0x10, 0x02,
	0x12, 0x16, 0x0a, 0x12, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x49, 0x54, 0x45, 0x52, 0x41,
	0x54, 0x4f, 0x52, 0x5f, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x45, 0x4c, 0x45,
	0x43, 0x54, 0x5f, 0x49, 0x54, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x50, 0x50, 0x10, 0x04,
	0x12, 0x16, 0x0a, 0x12, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x49, 0x54, 0x45, 0x52, 0x41,
	0x54, 0x4f, 0x52, 0x5f, 0x4e, 0x50, 0x10, 0x05, 0x32, 0xd6, 0x02, 0x0a, 0x0b, 0x43, 0x52, 0x55,
	0x44, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x12, 0x14, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x61, 0x65, 0x6f, 0x6e,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x35, 0x0a, 0x06, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x13, 0x2e, 0x61,
	0x65, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x07, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x12, 0x14, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x61, 0x65, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x13, 0x2e,
	0x61, 0x65, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x03, 0x47, 0x65,
	0x74, 0x12, 0x10, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x06, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x12, 0x13, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x61, 0x65, 0x6f, 0x6e, 0x2e, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30,
	0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_aeon_crud_proto_rawDescOnce sync.Once
	file_aeon_crud_proto_rawDescData = file_aeon_crud_proto_rawDesc
)

func file_aeon_crud_proto_rawDescGZIP() []byte {
	file_aeon_crud_proto_rawDescOnce.Do(func() {
		file_aeon_crud_proto_rawDescData = protoimpl.X.CompressGZIP(file_aeon_crud_proto_rawDescData)
	})
	return file_aeon_crud_proto_rawDescData
}

var file_aeon_crud_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_aeon_crud_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_aeon_crud_proto_goTypes = []any{
	(SelectIterator)(0),                 // 0: aeon.SelectIterator
	(*ExecuteRequest)(nil),              // 1: aeon.ExecuteRequest
	(*ExecuteResponse)(nil),             // 2: aeon.ExecuteResponse
	(*InsertRequest)(nil),               // 3: aeon.InsertRequest
	(*InsertResponse)(nil),              // 4: aeon.InsertResponse
	(*ReplaceRequest)(nil),              // 5: aeon.ReplaceRequest
	(*ReplaceResponse)(nil),             // 6: aeon.ReplaceResponse
	(*DeleteRequest)(nil),               // 7: aeon.DeleteRequest
	(*DeleteResponse)(nil),              // 8: aeon.DeleteResponse
	(*GetRequest)(nil),                  // 9: aeon.GetRequest
	(*GetResponse)(nil),                 // 10: aeon.GetResponse
	(*SelectRequest)(nil),               // 11: aeon.SelectRequest
	(*SelectResponse)(nil),              // 12: aeon.SelectResponse
	nil,                                 // 13: aeon.ExecuteRequest.KeyFormatsEntry
	nil,                                 // 14: aeon.ExecuteRequest.TupleFormatsEntry
	nil,                                 // 15: aeon.ExecuteResponse.TupleFormatsEntry
	(*InsertRequest_InsertFlags)(nil),   // 16: aeon.InsertRequest.InsertFlags
	(*ReplaceRequest_ReplaceFlags)(nil), // 17: aeon.ReplaceRequest.ReplaceFlags
	(*DeleteRequest_DeleteFlags)(nil),   // 18: aeon.DeleteRequest.DeleteFlags
	(*Operation)(nil),                   // 19: aeon.Operation
	(*Value)(nil),                       // 20: aeon.Value
	(*Error)(nil),                       // 21: aeon.Error
	(*Tuple)(nil),                       // 22: aeon.Tuple
	(*TupleFormat)(nil),                 // 23: aeon.TupleFormat
}
var file_aeon_crud_proto_depIdxs = []int32{
	19, // 0: aeon.ExecuteRequest.read_set:type_name -> aeon.Operation
	19, // 1: aeon.ExecuteRequest.write_set:type_name -> aeon.Operation
	20, // 2: aeon.ExecuteRequest.func_arg:type_name -> aeon.Value
	13, // 3: aeon.ExecuteRequest.key_formats:type_name -> aeon.ExecuteRequest.KeyFormatsEntry
	14, // 4: aeon.ExecuteRequest.tuple_formats:type_name -> aeon.ExecuteRequest.TupleFormatsEntry
	21, // 5: aeon.ExecuteResponse.error:type_name -> aeon.Error
	19, // 6: aeon.ExecuteResponse.read_set:type_name -> aeon.Operation
	19, // 7: aeon.ExecuteResponse.write_set:type_name -> aeon.Operation
	20, // 8: aeon.ExecuteResponse.func_ret:type_name -> aeon.Value
	15, // 9: aeon.ExecuteResponse.tuple_formats:type_name -> aeon.ExecuteResponse.TupleFormatsEntry
	22, // 10: aeon.InsertRequest.tuples:type_name -> aeon.Tuple
	16, // 11: aeon.InsertRequest.flags:type_name -> aeon.InsertRequest.InsertFlags
	23, // 12: aeon.InsertRequest.tuple_format:type_name -> aeon.TupleFormat
	21, // 13: aeon.InsertResponse.error:type_name -> aeon.Error
	22, // 14: aeon.InsertResponse.tuples:type_name -> aeon.Tuple
	23, // 15: aeon.InsertResponse.tuple_format:type_name -> aeon.TupleFormat
	22, // 16: aeon.ReplaceRequest.tuples:type_name -> aeon.Tuple
	17, // 17: aeon.ReplaceRequest.flags:type_name -> aeon.ReplaceRequest.ReplaceFlags
	23, // 18: aeon.ReplaceRequest.tuple_format:type_name -> aeon.TupleFormat
	21, // 19: aeon.ReplaceResponse.error:type_name -> aeon.Error
	22, // 20: aeon.ReplaceResponse.tuples:type_name -> aeon.Tuple
	23, // 21: aeon.ReplaceResponse.tuple_format:type_name -> aeon.TupleFormat
	22, // 22: aeon.DeleteRequest.keys:type_name -> aeon.Tuple
	18, // 23: aeon.DeleteRequest.flags:type_name -> aeon.DeleteRequest.DeleteFlags
	23, // 24: aeon.DeleteRequest.key_format:type_name -> aeon.TupleFormat
	21, // 25: aeon.DeleteResponse.error:type_name -> aeon.Error
	22, // 26: aeon.DeleteResponse.tuples:type_name -> aeon.Tuple
	23, // 27: aeon.DeleteResponse.tuple_format:type_name -> aeon.TupleFormat
	22, // 28: aeon.GetRequest.keys:type_name -> aeon.Tuple
	23, // 29: aeon.GetRequest.key_format:type_name -> aeon.TupleFormat
	21, // 30: aeon.GetResponse.error:type_name -> aeon.Error
	22, // 31: aeon.GetResponse.tuples:type_name -> aeon.Tuple
	23, // 32: aeon.GetResponse.tuple_format:type_name -> aeon.TupleFormat
	22, // 33: aeon.SelectRequest.key:type_name -> aeon.Tuple
	0,  // 34: aeon.SelectRequest.iterator:type_name -> aeon.SelectIterator
	20, // 35: aeon.SelectRequest.func_arg:type_name -> aeon.Value
	21, // 36: aeon.SelectResponse.error:type_name -> aeon.Error
	22, // 37: aeon.SelectResponse.tuples:type_name -> aeon.Tuple
	22, // 38: aeon.SelectResponse.key:type_name -> aeon.Tuple
	0,  // 39: aeon.SelectResponse.iterator:type_name -> aeon.SelectIterator
	23, // 40: aeon.SelectResponse.tuple_format:type_name -> aeon.TupleFormat
	23, // 41: aeon.ExecuteRequest.KeyFormatsEntry.value:type_name -> aeon.TupleFormat
	23, // 42: aeon.ExecuteRequest.TupleFormatsEntry.value:type_name -> aeon.TupleFormat
	23, // 43: aeon.ExecuteResponse.TupleFormatsEntry.value:type_name -> aeon.TupleFormat
	1,  // 44: aeon.CRUDService.Execute:input_type -> aeon.ExecuteRequest
	3,  // 45: aeon.CRUDService.Insert:input_type -> aeon.InsertRequest
	5,  // 46: aeon.CRUDService.Replace:input_type -> aeon.ReplaceRequest
	7,  // 47: aeon.CRUDService.Delete:input_type -> aeon.DeleteRequest
	9,  // 48: aeon.CRUDService.Get:input_type -> aeon.GetRequest
	11, // 49: aeon.CRUDService.Select:input_type -> aeon.SelectRequest
	2,  // 50: aeon.CRUDService.Execute:output_type -> aeon.ExecuteResponse
	4,  // 51: aeon.CRUDService.Insert:output_type -> aeon.InsertResponse
	6,  // 52: aeon.CRUDService.Replace:output_type -> aeon.ReplaceResponse
	8,  // 53: aeon.CRUDService.Delete:output_type -> aeon.DeleteResponse
	10, // 54: aeon.CRUDService.Get:output_type -> aeon.GetResponse
	12, // 55: aeon.CRUDService.Select:output_type -> aeon.SelectResponse
	50, // [50:56] is the sub-list for method output_type
	44, // [44:50] is the sub-list for method input_type
	44, // [44:44] is the sub-list for extension type_name
	44, // [44:44] is the sub-list for extension extendee
	0,  // [0:44] is the sub-list for field type_name
}

func init() { file_aeon_crud_proto_init() }
func file_aeon_crud_proto_init() {
	if File_aeon_crud_proto != nil {
		return
	}
	file_aeon_error_proto_init()
	file_aeon_value_proto_init()
	file_aeon_schema_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aeon_crud_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_aeon_crud_proto_goTypes,
		DependencyIndexes: file_aeon_crud_proto_depIdxs,
		EnumInfos:         file_aeon_crud_proto_enumTypes,
		MessageInfos:      file_aeon_crud_proto_msgTypes,
	}.Build()
	File_aeon_crud_proto = out.File
	file_aeon_crud_proto_rawDesc = nil
	file_aeon_crud_proto_goTypes = nil
	file_aeon_crud_proto_depIdxs = nil
}
